import pymysql
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL (InfinityFree)
DB_HOST = "sql312.infinityfree.com"
DB_USER = "if0_36176951"
DB_PASSWORD = "dd41HTdrgi3"
DB_NAME = "if0_36176951_bot"

# üîπ –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
TOKEN = "8095067567:AAFe08EhwZTh0JKbHvq1mmycRveC9WzlxE4"
ADMIN_ID = 7685258613

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_status_change = State()

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
def connect_db():
    return pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME, cursorclass=pymysql.cursors.DictCursor)

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS candidates (
            id INT AUTO_INCREMENT PRIMARY KEY,
            fullName VARCHAR(255),
            age INT,
            address TEXT,
            phone VARCHAR(20),
            telegram VARCHAR(50),
            relocation VARCHAR(10),
            driverLicense VARCHAR(10),
            passport VARCHAR(10),
            status VARCHAR(20) DEFAULT '–ß–∏—Å—Ç',
            date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

# üîπ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.add(
    KeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"),
    KeyboardButton("‚ùå –°–ø–∏—Å–æ–∫ –∫–∏–¥–∫–æ–≤"),
    KeyboardButton("üõ† –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã"),
)
admin_menu.add(
    KeyboardButton("‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"),
    KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"),
    KeyboardButton("üìä –û—Ç—á–µ—Ç—ã"),
)

# üîπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@dp.message_handler(commands=["admin_menu"])
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîπ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu)

# üîπ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –§–ò–û
@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", state="*")
async def search_candidate_prompt(message: types.Message):
    await BotStates.waiting_for_search.set()
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

@dp.message_handler(state=BotStates.waiting_for_search)
async def search_candidate(message: types.Message, state: FSMContext):
    candidate_name = message.text.strip()
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM candidates WHERE fullName LIKE %s", ("%" + candidate_name + "%",))
    candidate = cursor.fetchone()
    conn.close()
    
    if candidate:
        msg = (
            f"üë§ *–§–ò–û:* {candidate['fullName']}\n"
            f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {candidate['age']}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {candidate['address']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {candidate['phone']}\n"
            f"üí¨ *Telegram:* @{candidate['telegram']}\n"
            f"‚úà *–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ:* {candidate['relocation']}\n"
            f"üöó *–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞:* {candidate['driverLicense']}\n"
            f"üõÇ *–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:* {candidate['passport']}\n"
            f"‚ö† *–°—Ç–∞—Ç—É—Å:* {candidate['status']}\n"
            f"üìÖ *–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* {candidate['date_added']}"
        )
    else:
        msg = "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    await message.answer(msg, parse_mode="Markdown")
    await state.finish()

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
@dp.message_handler(lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
async def list_candidates(message: types.Message):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT fullName, telegram, date_added FROM candidates WHERE date_added >= NOW() - INTERVAL 1 DAY")
    candidates = cursor.fetchall()
    conn.close()
    
    if candidates:
        msg = "\n".join([f"üë§ {c['fullName']} | @{c['telegram']} | {c['date_added']}" for c in candidates])
    else:
        msg = "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç."
    
    await message.answer(msg)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "–∫–∏–¥–∫–æ–≤"
@dp.message_handler(lambda message: message.text == "‚ùå –°–ø–∏—Å–æ–∫ –∫–∏–¥–∫–æ–≤")
async def list_kidoks(message: types.Message):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT fullName, telegram, date_added FROM candidates WHERE status = '–ö–∏–¥–æ–∫' AND date_added >= NOW() - INTERVAL 1 DAY")
    kidoks = cursor.fetchall()
    conn.close()
    
    if kidoks:
        msg = "\n".join([f"‚ùå {k['fullName']} | @{k['telegram']} | {k['date_added']}" for k in kidoks])
    else:
        msg = "‚úÖ –ö–∏–¥–∫–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç."
    
    await message.answer(msg)

# üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
@dp.message_handler(lambda message: message.text == "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", state="*")
async def change_status_prompt(message: types.Message):
    await BotStates.waiting_for_status_change.set()
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ Telegram –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('–ö–∏–¥–æ–∫' –∏–ª–∏ '–ß–∏—Å—Ç')\n–ü—Ä–∏–º–µ—Ä: `@username –ö–∏–¥–æ–∫`", parse_mode="Markdown")

@dp.message_handler(state=BotStates.waiting_for_status_change)
async def change_status(message: types.Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) == 2 and parts[1] in ["–ö–∏–¥–æ–∫", "–ß–∏—Å—Ç"]:
        username = parts[0].replace("@", "")
        new_status = parts[1]
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("UPDATE candidates SET status = %s WHERE telegram = %s", (new_status, username))
        conn.commit()
        conn.close()
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}.")
        await state.finish()
    elif message.text.startswith("@"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `@username –ö–∏–¥–æ–∫` –∏–ª–∏ `@username –ß–∏—Å—Ç`")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `@username –ö–∏–¥–æ–∫` –∏–ª–∏ `@username –ß–∏—Å—Ç`")
        await state.finish()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    create_table()
    executor.start_polling(dp, skip_updates=True)
